{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","loading","time","word","fetch","_this","setState","intervalId","setInterval","prevState","this","clearInterval","react_default","a","createElement","className","App_Loading","App_Game","React","Component","Loading","_ref","Game","props","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","value","target","step","objectSpread","defineProperty","idx","temp","handleSubmit","preventDefault","limit","split","0","1","2","over","_this3","console","log","valueArr","values","map","style","display","flexDirection","alignItems","width","paddingTop","paddingBottom","backgroundColor","borderRadius","fontSize","fontWeight","marginTop","marginBottom","onSubmit","justifyContent","type","onChange","height","color","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0f62008.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = { loading: false, time: 1, word: \"비행기\" };\n  fetch = () => {\n    this.setState({ loading: true });\n    this.intervalId = setInterval(\n      () => this.setState(prevState => ({ time: prevState.time - 1 })),\n      1000\n    );\n  };\n  componentDidMount() {\n    this.fetch();\n  }\n  componentDidUpdate() {\n    if (this.state.time === 0 && this.state.loading === true) {\n      clearInterval(this.intervalId);\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>오늘의 삼행시 : {this.state.word}</div>\n        {this.state.loading ? (\n          <Loading time={this.state.time} />\n        ) : (\n          <Game word={this.state.word} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst Loading = ({ time }) => <div>{time}초 후 삼행시가 시작됩니다.</div>;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const word = this.props.word.split(\"\");\n    this.state = {\n      idx: 0,\n      target: { 0: word[0], 1: word[1], 2: word[2] },\n      step: { 0: \"\", 1: \"\", 2: \"\" },\n      temp: \"\",\n      limit: 10,\n      over: false\n    };\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(\n      () => this.setState({ limit: this.state.limit - 1 }),\n      1000\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.state.limit === 0 && this.state.over === false) {\n      \n      this.setState({ over: true });\n    }\n  }\n\n  handleChange = e => {\n    const { value } = e.target;\n    this.setState({\n      step: {\n        ...this.state.step,\n        [this.state.idx]: value\n      },\n      temp: value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      idx: prevState.idx + 1,\n      temp: \"\",\n      limit: 10\n    }));\n  };\n  render() {\n    console.log(this.state);\n    if (this.state.idx === 3) {\n      const valueArr = Object.values(this.state.step);\n      clearInterval(this.intervalId);\n      return (\n        <div>\n          <div>당신의 드립</div>\n          <div>\n            {valueArr.map(value => (\n              <div>{value}</div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    if (this.state.over) {\n      clearInterval(this.intervalId);\n      return <div>끝!</div>;\n    }\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          width: 250,\n          paddingTop: 30,\n          paddingBottom: 30,\n          backgroundColor: \"lightgray\",\n          borderRadius: 5\n        }}\n      >\n        {/* <div>{this.state.idx}단계</div> */}\n        <div\n          style={{\n            fontSize: 40,\n            fontWeight: \"600\",\n            marginTop: 30,\n            marginBottom: 30\n          }}\n        >\n          {this.state.target[this.state.idx]}\n        </div>\n        {/* <div>값{this.state.step[this.state.idx].value}</div> */}\n        <form\n          onSubmit={this.handleSubmit}\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <input\n            type=\"text\"\n            value={this.state.temp}\n            onChange={this.handleChange}\n            style={{ backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10, height: 20 }}\n          />\n          <input\n            type=\"submit\"\n            style={{ backgroundColor: \"lightgray\", borderRadius: 10 }}\n          />\n        </form>\n        <div\n          style={{\n            fontSize: 30,\n            fontWeight: \"600\",\n            marginTop: 30,\n            color: this.state.limit > 5 ? \"black\" : \"red\"\n          }}\n        >\n          {this.state.limit}초\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}