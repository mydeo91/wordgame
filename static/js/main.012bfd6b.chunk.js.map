{"version":3,"sources":["logo.svg","wordList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","r","__webpack_exports__","d","wordList","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randword","require","randidx","Math","floor","random","length","console","log","fetch","setState","loading","intervalId","setInterval","prevState","time","state","word","clearInterval","react_default","a","createElement","className","App_Loading","App_Game","React","Component","Loading","_ref","style","display","flexDirection","alignItems","fontSize","fontWeight","marginBottom","Game","_this2","handleChange","e","value","target","step","objectSpread","defineProperty","idx","temp","handleSubmit","preventDefault","limit","split","0","1","2","over","_this3","valueArr","values","justifyContent","map","conv1","charAt","conv2","slice","marginRight","backgroundColor","color","borderRadius","width","height","textAlign","paddingTop","paddingBottom","marginTop","borderColor","borderWidth","onSubmit","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.012bfd6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const wordList = [\n  \"이은호\",\n  \"강유빈\",\n  \"이은지\",\n  \"강수빈\",\n  \"이혁종\",\n  \"손현수\",\n  \"박진형\",\n  \"정용현\",\n  \"강주석\"\n];\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { loading: false, time: 5, word: this.randword() };\n  }\n  randword = () => {\n    const { wordList } = require(\"./wordList\");\n    const randidx = Math.floor(Math.random() * (wordList.length - 0)) + 0;\n    console.log(\"randidx\", randidx);\n\n    return wordList[randidx];\n  };\n  fetch = () => {\n    this.setState({ loading: true });\n    this.intervalId = setInterval(\n      () => this.setState(prevState => ({ time: prevState.time - 1 })),\n      1000\n    );\n  };\n  componentDidMount() {\n    this.fetch();\n  }\n  componentDidUpdate() {\n    if (this.state.time === 0 && this.state.loading === true) {\n      clearInterval(this.intervalId);\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loading ? (\n          <Loading {...this.state} />\n        ) : (\n          <Game word={this.state.word} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst History = () => {\n  return <div />;\n};\n\nconst Loading = ({ time, word }) => {\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n    >\n      <div style={{ fontSize: 30, fontWeight: \"600\", marginBottom: 20 }}>\n        {word}\n      </div>\n      <div style={{ fontSize: 60, fontWeight: \"600\", marginBottom: 20 }}>\n        {time}\n      </div>\n    </div>\n  );\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const word = this.props.word.split(\"\");\n    this.state = {\n      idx: 0,\n      target: { 0: word[0], 1: word[1], 2: word[2] },\n      step: { 0: \"\", 1: \"\", 2: \"\" },\n      temp: \"\",\n      limit: 10,\n      over: false\n    };\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(\n      () => this.setState({ limit: this.state.limit - 1 }),\n      1000\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.state.limit === 0 && this.state.over === false) {\n      this.setState({ over: true });\n    }\n  }\n\n  handleChange = e => {\n    const { value } = e.target;\n    this.setState({\n      step: {\n        ...this.state.step,\n        [this.state.idx]: value\n      },\n      temp: value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      idx: prevState.idx + 1,\n      temp: \"\",\n      limit: 10\n    }));\n  };\n  render() {\n    console.log(this.state);\n    if (this.state.idx === 3) {\n      const valueArr = Object.values(this.state.step);\n      clearInterval(this.intervalId);\n      return (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          <div style={{ fontSize: 20, fontWeight: \"600\", marginBottom: 30 }}>\n            {this.props.word}\n          </div>\n          <div>\n            {valueArr.map(value => {\n              const conv1 = value.charAt(0);\n              const conv2 = value.slice(1);\n              return (\n                <div>\n                  <span\n                    style={{\n                      fontSize: 20,\n                      fontWeight: \"600\",\n                      marginRight: 10,\n                      backgroundColor: \"black\",\n                      color: \"white\",\n                      borderRadius: 15,\n                      width: 30,\n                      height: 30,\n                      // display: \"flex\",\n                      // justifyContent: \"center\",\n                      // alignItems: \"center\",\n                      // flexDirection: \"row\"\n                      display: \"inline-block\",\n                      textAlign: \"center\"\n                    }}\n                  >\n                    {conv1}\n                  </span>\n                  <span>{conv2}</span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      );\n    }\n    if (this.state.over) {\n      clearInterval(this.intervalId);\n      return <div style={{ fontSize: 30, fontWeight: \"600\" }}>끝!</div>;\n    }\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          width: 250,\n          paddingTop: 30,\n          paddingBottom: 30,\n          backgroundColor: \"whitesmoke\",\n          borderRadius: 5\n        }}\n      >\n        {/* <div>{this.state.idx}단계</div> */}\n        <div\n          style={{\n            fontSize: 40,\n            fontWeight: \"600\",\n            marginTop: 30,\n            marginBottom: 30,\n            backgroundColor: \"white\",\n            width: 60,\n            height: 60,\n            borderRadius: 30,\n            borderColor: \"darkgray\",\n            borderWidth: 2,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          {this.state.target[this.state.idx]}\n        </div>\n        {/* <div>값{this.state.step[this.state.idx].value}</div> */}\n        <form\n          onSubmit={this.handleSubmit}\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\"\n          }}\n        >\n          <input\n            type=\"text\"\n            value={this.state.temp}\n            onChange={this.handleChange}\n            style={{\n              backgroundColor: \"lightgray\",\n              borderRadius: 10,\n              marginBottom: 10,\n              height: 20\n            }}\n          />\n          <input\n            type=\"submit\"\n            value=\"다음\"\n            style={{ backgroundColor: \"lightgray\", height: 30, fontSize: 20 }}\n          />\n        </form>\n        <div\n          style={{\n            fontSize: this.state.limit > 5 ? 30 : 50,\n            fontWeight: \"600\",\n            marginTop: 30,\n            color: this.state.limit > 5 ? \"black\" : \"red\"\n          }}\n        >\n          {this.state.limit}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}